//
//  main.cpp
//  euler
//
//  Created by Aditya on 12/19/16.
//  Copyright Â© 2016 Aditya. All rights reserved.
//

#include <iostream>

using namespace std;

// Problem 1
/*
 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 
 Find the sum of all the multiples of 3 or 5 below 1000.
 */
void findMultiples(){
    int counter = 0;
    for(int i=0; i<1000; i++){
        if(i%3 == 0 || i%5 == 0){ counter += i; } //If statement adding the integers if they pass
    }
    cout << counter << endl;
    return;
} // End of problem 1

// Problem 2
/*
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
int makeFibonacci(){
    int first = 0, second = 1, n, count=0;
    
    for(int i = 0; i<33; i++){
        if(i<1) n = i;
        
        else{
            n = first + second;
            first = second;
            second = n;
        }
        
        if(n%2 == 0) count += n;
    }
    return count;
}


int main(int argc, const char * argv[]) {
    // insert code here...
    std::clock_t start;
    start = std::clock();
    // your test
    findMultiples();
    std::cout << "Time for Problem 1: " << (std::clock() - start) / (double)(CLOCKS_PER_SEC / 1000) << " ms" << std::endl;
    
    start = std::clock();
    cout << "Total of even valued terms: " << makeFibonacci();
    std::cout << "\nTime for Problem 2: " << (std::clock() - start) / (double)(CLOCKS_PER_SEC / 1000) << " ms" << std::endl;
    return 0;
}
